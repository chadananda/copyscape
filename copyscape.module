<?php

// $Id$

/**
 * @file
 * 
 */
 
 

/* Implementation of the Copyscape Premium API
 *    http://www.copyscape.com/apiconfigure.php
 * 
 * Notes: this module will submitcted node types to copyscape on each save
 * results will be displayed as a block or in the form
 *
*/






/**
 * Implementation of hook_perm().
 *
 * Since we are limiting the ability to create new nodes to certain users,
 * we need to define what those permissions are here. We also define a permission
 * to allow users to edit the nodes they created.
 */
function copyscape_perm() {
  return array(
    'view copyscape information',    
    'administer copyscape settings',  
  );
}


/**
 * Implementation of hook_menu(). 
 */ 
function copyscape_menu() {
  $items = array(); 
  $items['admin/settings/copyscape'] = array(
    'title' => t('Copyscape'),
    'description' => t('Copyscape Settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('copyscape_admin_settings_form', NULL),
    'access callback' => 'user_access',
    'access arguments' => array('administer copyscape settings'),
    'weight' => -10, // just for testing
  );
  $items['admin/settings/copyscape/settings'] = array(
    'title' => t('Settings'),
    'description' => t('Copyscape Settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('copyscape_admin_settings_form', NULL),
    'access callback' => 'user_access',
    'access arguments' => array('administer copyscape settings'),
    'type'  => MENU_DEFAULT_LOCAL_TASK,
  ); 
  $items['admin/copyscape/pagiarism_details'] = array(
    'title' => t('Copyscape Plagiarsim Report'), 
    'page callback' => 'copyscape_plagiarism_details', 
    'access callback' => 'user_access',
    'access arguments' => array('view copyscape information'),
    'type'  => MENU_CALLBACK,
  );
  return $items;
}



/**
 * Implementation of hook_nodeapi().
 * 
 */
function copyscape_nodeapi(&$node, $op, $teaser, $page) {  
  $nodetypes = (array) variable_get('copyscape_selected_node_types', array());
  if (!$nodetypes[$node->type])  return;
  
  if ($op=='update') {    
    copyscape_update_node($node);   
  } 
  elseif ($op=='delete') {
    copyscape_delete_node($node);
  } 
  elseif ($op=='view') {    
    if (user_access('view copyscape information') && ($message = copyscape_details_message($node->nid, 3, TRUE))) {
      drupal_add_css(drupal_get_path('module', 'copyscape') . '/copyscape.css');
      drupal_set_message($message, 'error');       
    }
  } 
}

function copyscape_should_display($node) { 
  $nodetypes = (array) variable_get('copyscape_selected_node_types', array());
  if (!$nodetypes[$node->type])  return;
  return user_access('view copyscape information');
}

function copyscape_admin_settings_form() {
  $have_credentials = variable_get('copyscape_username', '') &&  variable_get('copyscape_apikey', '');
  $form = array();  
  $form['copyscape'] = array(
      '#type'         => 'fieldset',
      '#title'        => t('Copyscape'), 
      '#collapsible'  => TRUE,
      '#collapsed'    => FALSE,
  ); 
  // show account balance if we can
  if ($have_credentials) { 
     $header = array('Account Balance in $USD', 'Total Remaining Requests', 'Remaining Requests Allowed Today'); 
     $form['copyscape']['balance'] = array(   
       '#value' => theme('table', $header, array(copyscape_balance()), array('class' => 'copyscape_balance')),
     );  
  }
  // select from list of node types which to check with copyscape
  $node_types = node_get_types();
  foreach (array_keys($node_types) as $key) $node_list[$key] = $node_types[$key]->name;    
  $form['copyscape']['copyscape_selected_node_types'] = array(
    '#type'     => 'checkboxes',
    '#title'    => t('Content types to check with copyscape (after each node update)'),
    '#default_value' => variable_get('copyscape_selected_node_types', ''),
    '#options'  => $node_list,
    '#multiple'  => TRUE,
    '#description'  => t('Selected content types to monitor with Copyscape.'),
  );   
  $form['copyscape']['copyscape_plagiarism_threshold'] = array(
    '#type'     => 'textfield',
    '#title'    => t('Percent match considered plagiarism'),
    '#default_value' => variable_get('copyscape_plagiarism_threshold', 50),  
    '#description'  => t('Above this percentage, a match will be considered plagiarised. Too low a number will create false positive warnings.'),
  ); 
   
  // copyscape credentials: username and api key
  $form['copyscape']['credentials'] = array(
      '#type'         => 'fieldset',
      '#title'        => t('Copyscape User Credentials'), 
      '#collapsible'  => TRUE,
      '#collapsed'    => $have_credentials,
  ); 
  $form['copyscape']['credentials']['copyscape_username'] = array(
    '#type'     => 'textfield',
    '#title'    => t('Username for your Copyscape account'),
    '#default_value' => variable_get('copyscape_username', ''), 
    '#multiple'  => TRUE,
    '#description'  => t('This requires a premium account') . 
       ' ('. l('create copyscape account', 'http://www.copyscape.com/signup.php?sign_up&pro=1&cjdrupal=1') .') ',
  );   
  $form['copyscape']['credentials']['copyscape_apikey'] = array(
    '#type'     => 'textfield',
    '#title'    => t('API key for Copyscape service'),
    '#default_value' => variable_get('copyscape_apikey', ''), 
    '#multiple'  => TRUE,
    '#description'  =>  t('Copyscape API key, ') .  
       ' ('. l('get your key here', 'http://www.copyscape.com/apiconfigure.php#key') .') ',
  );    
  // a simple way to see if this form has been updated, used by cron to decide when to do a full check
  $form['copyscape_settings_updated'] = array(
    '#type'     => 'hidden', 
    '#default_value' => TRUE,   
  );  
  return system_settings_form($form);
}


 
  
/** 
 * Implementation of hook_cron().
 * 
 */
function copyscape_cron() {
 if (variable_get('copyscape_settings_updated', FALSE)) {
   variable_set('copyscape_settings_updated', FALSE);
   // check to see if we need to update content types 
 } 
 else { 
  // periodically (perhaps daily) check to see if we need to update content types just to mop up 
 }
}

 
function copyscape_details_message($nid, $max=10, $skiptext=FALSE) {
  $threshold = variable_get('copyscape_plagiarism_threshold', 50);  
  if (!$data = db_result(db_query("SELECT copydata FROM {copyscape} WHERE nid=%d", $nid))) return; 
  if (db_result(db_query("SELECT score FROM {copyscape} WHERE nid=%d", $nid)) < $threshold) return; 
  
  $details = unserialize($data);
  list($querywords, $count, $list) = array_values($details);  
  foreach ($list as $key => $r) {
    $score = round($r['minwordsmatched'] / $querywords * 100, 0);
    if ($score>$threshold) {
      $html = $skiptext ? '' : "\n<div class='examples'>{$r['htmlsnippet']}</div>"; 
      $items[$key] = '<div class="title">'. round($r['minwordsmatched'] / $querywords * 100, 0) .'% match: '.
       l($r['title'], $r['url']) ."</div>{$html}"; 
    }
  } 
  if (!$count = count($items)) return; // no items above the threshold
  $items = array_slice($items, 0, $max); 
  $message = '<div class="copyscape_message"><div class="main_title">'.
    t('Warning Plagiarism detected on this page! Found %count online URLs matching over %threshold%', 
    array('%count' => $count, '%threshold' => $threshold)) .":</div> \n<ol>\n<li>".  
    implode("</li>\n<li>", $items) ."</li></ol>";
  if ($skiptext) $message .= '<div class="more"> '. l('Click here for full report.', 'admin/copyscape/pagiarism_details/'. $nid) .'</div>';
  $message .= "</div>";
  return $message;  
}

/*
* Displays full plagiarism details for a specific node
*/
function copyscape_plagiarism_details() {
  drupal_add_css(drupal_get_path('module', 'copyscape') . '/copyscape.css');
  if (!($nid = (int)arg(3))) return; //admin/copyscape/pagiarism_details
  $message = copyscape_details_message($nid, 500);
  return $message;
}

function copyscape_update_node($node) {
  //drupal_set_message('copyscape_update_node');
  include_once(drupal_get_path('module', 'copyscape') .'/copyscape.inc');
 
  $node_text = strip_tags($node->body);
  $response = copyscape_api_text_search($node_text);
  if (!is_array($response)) return;  
  if ($response['result']['0']['minwordsmatched']) $score = round($response['querywords'] / $response['result']['0']['minwordsmatched'] * 100, 0);
   else $score = 0;
 
  // serialize and save response for this node 
  if (db_result(db_query("SELECT * FROM {copyscape} WHERE nid=%d", $node->nid))) $update = array('nid'); 
  $copyscape_rec = array(
    'nid'         => $node->nid,
    'score'       => $score,
    'copydata'    => serialize($response), 
  ); 
  drupal_write_record('copyscape', $copyscape_rec, $update);  
}



function copyscape_delete_node($node) {
  db_query('DELETE FROM {copyscape} WHERE nid = %d', $node->nid); 
}

/*
 * Returns the current account balance from your Copyscape Premium account.
 * Instead of calling the remote API every time, we cache the value for 5 minutes
 */
function copyscape_balance() {
  if (!variable_get('copyscape_username', '') || !(variable_get('copyscape_apikey', ''))) return; 
  $old_balance = variable_get('copyscape_last_balance', 0);
  $last_request = variable_get('copyscape_last_balance_request', 0);
  if (time()-$last_request>300) {
    include_once(drupal_get_path('module', 'copyscape') .'/copyscape.inc');
    $new_balance = copyscape_api_call('balance');
    variable_set('copyscape_last_balance', $new_balance);
    variable_set('copyscape_last_balance_request', time());
    return $new_balance;
  } 
  else return $old_balance;
}


